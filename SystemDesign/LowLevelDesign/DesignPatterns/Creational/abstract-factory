// The Abstract Factory provides you with an interface for creating objects from each class of the product family.
// It leaves the actual product creation to concrete factory classes. Each factory type corresponds to a certain product variety.

#include <iostream>
#include <cstring>

class AbstractProductA {
  public:
    virtual ~AbstractProductA(){};
    virtual std::string UsefulFunctionA() const = 0;
};

class ConcreteProductA1 : public AbstractProductA {
  public:
    std::string UsefulFunctionA() const override {
        return "The result of product A1";
    }
};

class ConcreteProductA2 : public AbstractProductA {
  public:
    std::string UsefulFunctionA() const override {
        return "The result of product A2";
    }
};

class AbstractProductB {
  public:
    virtual ~AbstractProductB(){};
    virtual std::string UsefulFunctionB() const = 0;

    virtual std::string AnotherUsefulFunctionB(const AbstractProductA &collaborator) const = 0;
};

class ConcreteProductB1 : public AbstractProductB {
  public:
    std::string UsefulFunctionB() const override {
        return "The result of product B1";
    }
    std::string AnotherUsefulFunctionB(const AbstractProductA &collaborator) const override{
        const std::string result = collaborator.UsefulFunctionA();
        return "The result of product B1 with (" + result + ")";
    }
};

class ConcreteProductB2 : public AbstractProductB {
  public:
    std::string UsefulFunctionB() const override {
        return "The result of product B2";
    }
    std::string AnotherUsefulFunctionB(const AbstractProductA &collaborator) const override{
        const std::string result = collaborator.UsefulFunctionA();
        return "The result of product B2 with (" + result + ")";
    }
};

class AbstractFactory {
  public:
    virtual AbstractProductA *CreateProductA() const = 0;
    virtual AbstractProductB *CreateProductB() const = 0;
};

class ConcreteFactory1 : public AbstractFactory {
  public:
    AbstractProductA *CreateProductA() const override {
        return new ConcreteProductA1();
    }
    AbstractProductB *CreateProductB() const override {
        return new ConcreteProductB1();
    }
}

class ConcreteFactory2 : public AbstractFactory {
  public:
    AbstractProductA *CreateProductA() const override {
        return new ConcreteProductA2();
    }
    AbstractProductB *CreateProductB() const override {
        return new ConcreteProductB2();
    }
}

void ClientCode(const AbstractFactory &factory){
    const AbstractProductA *productA = factory.CreateProductA();
    const AbstractProductB *productB = factory.CreateProductB();
    std::cout << productB->UsefulFunctionB() << '\n';
    std::cout << productB->AnotherUsefulFunctionB(*productA) << '\n';
    delete productA;
    delete productB;
}

int main(){
    std::cout << "Client: Testing client code with the first factory type:\n";
    ConcreteFactory1 *f1 = new ConcreteFactory1();
    ClientCode(*f1);
    delete f1;
    std::cout << std::endl;
    std::cout << "Client: Testing the same client code with the second factory type:\n";
    ConcreteFactory2 *f2 = new ConcreteFactory2();
    ClientCode(*f2);
    delete f2;
    return 0;
}